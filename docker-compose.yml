version: '3.7'
services:
  producer:
    build: ./producer
    container_name: producer
    networks:
      - trino
  redpanda:
    image: docker.vectorized.io/vectorized/redpanda:v21.11.3
    container_name: redpanda
    hostname: redpanda
    command:
      - redpanda start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr 0.0.0.0:9092
      - --advertise-kafka-addr redpanda:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr redpanda:8082
      - --set redpanda.enable_transactions=true
      - --set redpanda.enable_idempotence=true
      - --set redpanda.auto_create_topics_enabled=true
    ports:
      - "9092:9092"
      - "8081:8081"
      - "8082:8082"
      - "9644:9644"
    networks:
      - trino

  trino-coordinator:
    container_name: trino-coordinator
    image: 'trinodb/trino:latest'
    hostname: trino-coordinator
    ports:
      - '8080:8080'
    volumes:
      - ./etc:/etc/trino
    networks:
      - trino

  mariadb:
    container_name: mariadb
    image: 'mariadb:latest'
    hostname: mariadb
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db
    volumes:
      - ./metastore-data:/var/lib/mysql
    networks:
      - trino

  hive-metastore:
    container_name: hive-metastore
    hostname: hive-metastore
    image: 'bitsondatadev/hive-metastore:latest'
    ports:
      - '9083:9083'
    volumes:
      - ./conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
    depends_on:
      - mariadb
    networks:
      - trino

  minio:
    hostname: minio
    image: 'minio/minio:latest'
    container_name: minio
    ports:
      - "9001:9001"
      - "9000:9000"
    command: [ "server", "/data", "--console-address", ":9001" ]
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    networks:
      - trino

  # To Create Minio bucket and upload the mock user data parquet file.
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/users;
      /usr/bin/mc mb minio/users;
      /usr/bin/mc policy set public minio/users;
      /usr/bin/mc cp /data/mock_user_data.parq minio/users/mock_user_data.parq;
      exit 0;
      "
    networks:
      - trino
    volumes:
      - ./data/mock_user_data.parq:/data/mock_user_data.parq

volumes:
  minio-data:
    driver: local

networks:
  trino:
    driver: bridge
